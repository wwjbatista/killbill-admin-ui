<%= form_for @refund, :url => {:action => :create}, :html => {:class => 'form-horizontal'} do |f| %>
    <%= hidden_field_tag :account_id, @invoice.account_id %>
    <%= hidden_field_tag :payment_id, @payment.payment_id %>
    <%= hidden_field_tag :invoice_id, @invoice.invoice_id %>

    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <div class="checkbox">
          <%= label_tag :adjustment_type do %>
              <%= radio_button_tag :adjustment_type, 'noInvoiceAdjustment', :checked => true %>
              No Invoice Adjustment
          <% end %>
        </div>
        <% if can? :item_adjust, Kaui::Invoice %>
            <div class="checkbox">
              <%= label_tag :adjustment_type do %>
                  <%= radio_button_tag :adjustment_type, 'invoiceItemAdjustment' %>
                  Invoice Item Adjustment
              <% end %>
            </div>
        <% end %>
      </div>
    </div>

    <div id="invoiceItems" style="display:none">
      <% @invoice.items.each_with_index do |ii, index| %>
          <% if ii.amount > 0 %>
              <div id=<%= "div_#{ii.invoice_item_id}" %> class="form-group">
                <label class="col-sm-2 control-label"></label>

                <% bundle = @bundles.find { |bundle| bundle.bundle_id == ii.bundle_id } %>
                <div class="col-sm-10">
                  <input type="checkbox" id=<%= "cb_adj_#{ii.invoice_item_id}" %>>
                  <%= "Item #{index + 1} : #{ii.description} #{"(bundle #{bundle.external_key})" unless bundle.nil?}" %>
                  <%= text_field_tag "adjustments[#{ii.invoice_item_id}]", index, :id => "tf_adj_#{ii.invoice_item_id}", :value => ii.amount, :class => 'form-control' %>
                </div>
              </div>
          <% end %>
      <% end %>
    </div>

    <div id="div_refund_amount" class="form-group">
      <%= label_tag :amount, 'Amount', :class => 'col-sm-2 control-label' %>
      <div class="col-sm-10">
        <%= number_field_tag :amount, @payment.purchased_amount, :id => 'refund_amount', :class => 'form-control' %>
        <p class="help-block">Currency: <%= @invoice.currency %></p>
      </div>
    </div>
    <div class="form-group">
      <%= label_tag :reason, 'Reason', :class => 'col-sm-2 control-label' %>
      <div class="col-sm-10">
        <%= select_tag :reason, options_for_select(Kaui.refund_reason_codes), :class => 'form-control' %>
      </div>
    </div>
    <div class="form-group">
      <%= label_tag :comment, 'Comment', :class => 'col-sm-2 control-label' %>
      <div class="col-sm-10">
        <%= text_area_tag :comment, nil, :rows => 3, :class => 'form-control' %>
      </div>
    </div>
    <div class="form-group">
      <div class="col-sm-offset-2 col-sm-10">
        <%= submit_tag 'Save', :class => 'btn btn-default' %>
      </div>
    </div>
<% end %>

<%= javascript_tag do %>
    var textToDivId = function(textId) {
        return "div_" + textId.split("tf_adj_")[1];
    };

    var textToCheckboxId = function(textId) {
        return "cb_adj_" + textId.split("tf_adj_")[1];
    };

    var checkboxToTextId = function(cbId) {
        return "tf_adj_" + cbId.split("cb_adj_")[1];
    };

    var setClassForElement = function(id, newClass) {
        var currentClasses = $(id).attr('class').split(' ');
        for (var i=0; i<currentClasses.length; i++) {
            $(id).removeClass(currentClasses[i]);
        }
        $(id).addClass(newClass);
    };

    var validateInvoiceItemAmount = function(id) {
        var divId = textToDivId(id);
        if (Number($("#" + id).attr('value')) > Number($("#" + id).attr('originalValue'))) {
            setClassForElement($("#" + divId), "form-group error");
        } else {
            setClassForElement($("#" + divId), "form-group");
        }
    };

    var validateRefundAmount = function() {
        if (Number($("#refund_amount").attr('value')) > <%= @payment.purchased_amount %> ||
          Number($("#refund_amount").attr('value')) <= 0) {
          setClassForElement("#div_refund_amount", "form-group error");
          $('#new_kill_bill_client_model_invoice_item :submit').prop('disabled', true);
        } else {
          setClassForElement("#div_refund_amount", "form-group");
          $('#new_kill_bill_client_model_invoice_item :submit').prop('disabled', false);
        }
    };

    /*
    * Disabled unwanted invoice item at the time we submit the form
    */
    var disableNonCheckedInvoiceItem = function() {

        $('input').filter(function() {
            return this.id.match(/cb_adj_/);
        }).each(function() {
            var id = checkboxToTextId(this.id);
            if (! $(this).is(':checked')) {
                $("#" + id).prop('disabled', true);
            }
        });
    };

    /*
     * Recompute refund amount based on adjustment type:
     * - For Invoice Item Adjustment, recompute price based on selection and invalidate text area to make it match exact selection
     * _ For Invoice adjustment or no adjustment, default to payment amount
     */
    var recomputeRefundAmountAndValidateAmount = function() {
        var computedRefundAmount = <%= @payment.purchased_amount %>;
        if ($("#adjustment_type_invoiceItemAdjustment").is(':checked')) {
            var x = 0; $('input').filter(function() { return this.id.match(/tf_adj_/) }).each(function() {
                var id = textToCheckboxId(this.id);
                if ($("#" + id).is(':checked')) {
                    x = x + Number(this.value);
                }
            });
            computedRefundAmount = x.toFixed(2);
            $("#refund_amount").attr('value', computedRefundAmount);
            $("#refund_amount").prop('readonly', true);
        } else {
            $("#refund_amount").attr('value', computedRefundAmount);
            $("#refund_amount").prop('readonly', false);
        }
        validateRefundAmount();
    };

    /*
    * When clicking checkbox for each item, disable amount and recompute total refund amount
    */
    var onClickInvoiceItemAdjustment = function(event) {
        var id = checkboxToTextId(this.id);
        if ($(this).is(':checked')) {
            $("#" + id).prop('readonly', true);
        } else {
            $("#" + id).prop('readonly', false);
            $("#" + id).attr('value', $("#" + id).attr('originalValue'));
        }
        recomputeRefundAmountAndValidateAmount();
        validateInvoiceItemAmount(id);
    };

    /*
    * When selecting Invoice Adjustment or No Adjustment, hide invoice items and recompute refund Amount
    */
    var onClickWithInvoiceOrNoAdjustment = function(event) {
        $("#invoiceItems").hide();
        recomputeRefundAmountAndValidateAmount();
    };

    /*
    * When selecting Invoice Item Adjustment, show items and recompute refund amount
    */
    var onClickWithInvoiceItemAdjustment = function(event) {
        $("#invoiceItems").show();
        recomputeRefundAmountAndValidateAmount();
    };

    /*
    * Attach all handlers when page loads
    */
    $(document).ready(function() {

        /*
        * For refund amount text area, attach handler to disable 'ENTER' and also prevent bad values
        */
        $("#refund_amount").bind('keypress', function(e) {
            if ((e.keyCode || e.which) == 13) {
                return false;
            }
        }).blur(function(e) {
            validateRefundAmount();
        });

        /*
        * If doing invoice Item adjustment, disable entries that were not selected, so the controllers does not
        * get them
        */
        $('#new_kill_bill_client_model_invoice_item :submit').mousedown(disableNonCheckedInvoiceItem);

        /*
        * Adjustment type handlers
        */
        $("#adjustment_type_noInvoiceAdjustment")
        .click(onClickWithInvoiceOrNoAdjustment);
        $("#adjustment_type_invoiceItemAdjustment")
        .click(onClickWithInvoiceItemAdjustment);

        /*
        * Attach handler onClickInvoiceItemAdjustment for all invoice item checkbox
        */
        $('input').filter(function() {
            return this.id.match(/cb_adj_/);
        }).click(onClickInvoiceItemAdjustment);

        /*
        * Attach handler for all invoice item text areas so that:
        * - We disable posting form when pressing 'ENTER'
        * - Automatically select the matching checkbox on 'ENTER' and disable checkbox
        */
        $('input').filter(function() {
            return this.id.match(/tf_adj_/);
        }).each( function() {
            var originalValue = this.value;
            $(this).attr('originalValue', originalValue);
            $(this).bind('keypress', function(e) {
                if ((e.keyCode || e.which) == 13) {
                    var id = textToCheckboxId(this.id);
                    $("#" + id).attr('checked', true);
                    $(this).prop('readonly', true);
                    recomputeRefundAmountAndValidateAmount();
                    validateInvoiceItemAmount(this.id);
                    return false;
                }
            });
        });
    });
<% end %>
